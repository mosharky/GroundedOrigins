plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_name}-fabric+${minecraft_version}"
}

repositories {
    maven {
        name = "Pug's Maven"
        url = 'https://maven.merchantpug.net/releases/'
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases/'
    }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
    }
    maven {
        name = "Cafeteria"
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
    maven {
        name = "Jamie's White Shirt"
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        name = "Shedaniel"
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}


dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    //ModMenu
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
    //Origins
    modImplementation "com.github.apace100:origins-fabric:${origins_fabric_version}"
    //Apugli
    include(modImplementation("net.merchantpug:Apugli:${apugli_version}+${minecraft_version}-fabric"))
    // MixinExtras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}"))
    // Common
    implementation project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
